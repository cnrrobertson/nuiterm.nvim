==============================================================================
------------------------------------------------------------------------------
*nuiterm* Neovim terminal manager for terminals local to buffer, window, tab, or editor
*Nuiterm*

MIT License Copyright (c) 2023 Connor Robertson

===========================================================================

Key features:
- Quickly toggle window with terminal buffer inside

- Terminal buffer is local to buffer, window, tab, or editor in that it
  can be quickly toggled and text can be sent to it from it's respective
  locality

- Terminals can be quickly toggled from a menu or telescope extension

- Text can be easily sent from buffer to terminal (line, visual selection,
  visual line selection, etc.) built with a REPL in mind

# Setup~

This plugin needs to be setup with `require('nuiterm').setup({})` (replace
`{}` with you `config` table). It will create a global Lua table `Nuiterm`
which contains the `terminals`.

See |Nuiterm.config| for available config settings.

## Dependencies~
- 'MunifTanjim/nui.nvim' for UI
- (optional) 'nvim-telescope/telescope.nvim' for extra terminal finder

## Example config with keybindings~
>
  require('nuiterm').setup({
    type = "buffer",
    focus_on_open = false,
    focus_on_send = false,
  })
  -- Toggle terminal of default type
  vim.keymap.set({'n','t'},'<c-n>',Nuiterm.toggle)
  -- (For buffer-type terminals) show connected buffer in window 1
  vim.keymap.set({'n','t'},'<c-p>',Nuiterm.focus_buffer_for_terminal)
  -- Toggle global terminal number 1
  vim.keymap.set('n','<leader>n',function()Nuiterm.toggle("editor",1)end)

  -- Toggle terminal menu
  vim.keymap.set('n','<leader>tm',Nuiterm.toggle_menu)
  vim.keymap.set('t','<c-t>',Nuiterm.toggle_menu)
  vim.keymap.set('n','<leader>ft',require('nuiterm.telescope').picker)

  -- Sending lines to terminal
  vim.keymap.set('n', '<localleader>r', require('nuiterm').send_line)
  vim.keymap.set('v', '<localleader>r', require('nuiterm').send_visual)
  vim.keymap.set('v', '<localleader>R', function() require('nuiterm').send_visual("select") end)
  vim.keymap.set('n', '<localleader>t', require('nuiterm').toggle_menu)
<

## Usage as repl
A terminal connected to the current buffer can be easily made a REPL by
adjusting the keymap to send a REPL setup command on toggle (python for
example):
>
  vim.keymap.set({'n','t'},'<c-n>',function() Nuiterm.toggle(nil,nil,"python") end)
<

## Opening new global terminal
If a new, unused global terminal is desired, you can pass in -1 as the id
for an "editor" type terminal:
>
  -- Open a new global terminal
  vim.keymap.set('n', '<c-n>', function() Nuiterm.toggle("editor",-1) end)
<

## Telescope integration~
`telescope.nvim` can be used to find and pick terminals to toggle via
keymap as:
>
  vim.keymap.set('n','<leader>f',require('nuiterm.telescope').picker)
<

## Task-specific terminals~
A common use case for floating terminals such as are provided with this
plugin is to quickly open a TUI such as `lazygit`. This can be easily
accomplished with nuiterm via:

>
  local function lazygit_terminal()
   local term = require("nuiterm").create_new_term({
     type = "editor",
     type_id = 100,
      keymaps = {{'t', '<esc>', '<esc>'}},
     ui = {
       type = "float",
       default_popup_opts = {border={text={top="Lazygit"}}}
     }
   })
   term:show(true,"lazygit")
  end
  vim.keymap.set('n','<leader>g',lazygit_terminal)
<

# Available commands

```vim
:Nuiterm [[type=]...] [[num=]...] [[cmd=]...]
:[count|range]NuitermSend [[cmd=]...] [[type=]...] [[num=]...] [[setup_cmd=]...]
:NuitermChangeStyle [[style=]...] [[type=]...] [[num=]...]
:NuitermChangeLayout [[type=]...] [[num=]...]
:NuitermHideAll
:NuitermMenu
```

**Note:** Commands can be used with or without keyword arguments. i.e. `Nuiterm type=editor` is the same as `Nuiterm editor`.

### Examples

```vim
" Toggle a terminal of default type and number
:Nuiterm

" Toggle a terminal for buffer 10
:Nuiterm type=buffer num=10

" Toggle a terminal for buffer 10 and start it with command `lua` if it doesn't already exist
:Nuiterm type=buffer num=10 cmd=lua

" Send the current line to the terminal of default type and number
:NuitermSend

" Send `lua` to the terminal associated with tab 2
:NuitermSend cmd=lua type=tab num=2

" Send the line 10 to the terminal associated with tab 2
:10NuitermSend type=tab num=2

" Send `lua` to the terminal of your choosing from terminal menu
:NuitermSend cmd=lua type=select

" Send `lua` to the terminal of your choosing from terminal menu
:NuitermSend cmd=lua num=select

" Send lines 10 to 20 to the terminal associated with tab 2
:10,20NuitermSend type=tab num=2

" Send visual selection to the terminal associated with tab 2
:'<,'>NuitermSend type=tab num=2

" Send print("hello") to the terminal associated with tab 2
" and if it hasn't been started before, send python first
:NuitermSend cmd=print("hello") type=tab num=2 setup_cmd=python

" Change to popup style for terminal associated with tab 2
:NuitermChangeStyle style=popup type=tab num=2

" Change layout to next layout in config for terminal associated with tab 2
" (see help docs for fine grained control in lua interface)
:NuitermChangeLayout type=tab num=2
```

# Tips~

- Given that most terminals are implemented as vim `splits` and are opened
  and closed constantly, it is helpful to set the vim option `:noequalalways`
  or `:lua vim.o.equalalways = false` to stop constant window resizing

# Comparisons~

- 'akinsho/toggleterm.nvim':
   - This was the main inspiriation for this plugin and the design of using
     a `Terminal` object was based on the `toggleterm` design
   - The downside of this plugin is it's inability to easily make terminals
     that are local to buffers, windows, or tabs for quickly sending text
     from specific buffers to specific terminals
- 'nyngwang/NeoTerm.lua':
   - This plugin focuses on buffer specific terminals but with very few
     features
- 'caenrique/nvim-toggle-terminal':
   - Has great features and toggles tab specific and window specific
     terminals (but replaced by 'caenrique/buffer-term.nvim')


------------------------------------------------------------------------------
                                                             *Nuiterm.terminals*
                              `Nuiterm.terminals`
Nuiterm data storage

>
  Nuiterm.terminals = {
    editor = {},
    tab = {},
    window = {},
    buffer = {}
  }
  Nuiterm.window = nil

<

------------------------------------------------------------------------------
                                                               *Nuiterm.setup()*
                           `Nuiterm.setup`({config})
Plugin setup

Parameters~
{config} `(table|nil)` Plugin config table. See |Nuiterm.config|.

Usage~
`require('nuiterm').setup({})` (replace `{}` with your `config` table)

------------------------------------------------------------------------------
                                                     *Nuiterm.create_term_win()*
                       `Nuiterm.create_term_win`({opts})
Create terminal window

Parameters~
{opts} `(table|nil)` Terminal UI config table

Usage~
`Nuiterm.create_term_win({})` (replace `{}` with UI `config` table)

Return~
|nui.object|

------------------------------------------------------------------------------
                                                       *Nuiterm.show_term_win()*
                        `Nuiterm.show_term_win`({term})
Show terminal window

Parameters~
{term} `(Terminal|nil)` Terminal to be displayed in window

------------------------------------------------------------------------------
                                                     *Nuiterm.create_new_term()*
                       `Nuiterm.create_new_term`({opts})
Create new terminal

Parameters~
{opts} `(table|nil)` Terminal config table. See |Nuiterm.config|

Usage~
`Nuiterm.create_new_term({})` (replace `{}` with your `config` table)

Return~
|Terminal|

------------------------------------------------------------------------------
                                                      *Nuiterm.hide_all_terms()*
                           `Nuiterm.hide_all_terms`()
Hide all visible terminals

Usage~
`Nuiterm.hide_all_terms()`

------------------------------------------------------------------------------
                                                              *Nuiterm.toggle()*
                     `Nuiterm.toggle`({type}, {num}, {cmd})
Toggle terminal

Note: if the cursor is in a terminal, that terminal will be hidden

Parameters~
{type} `(string|nil)` the type of terminal to toggle (see |Nuiterm.config|)
{num} `(integer|string|nil)` the id of the terminal to toggle
{cmd} `(string|nil)` a command to run in terminal (if opening for the first time)

Usage~
`Nuiterm.toggle('buffer', 12)` (toggle the terminal bound to buffer 12)
Usage~
`Nuiterm.toggle('editor', 2)` (toggle the global terminal number 2)
Usage~
`Nuiterm.toggle()` (toggle the default terminal for this buffer/window/tab/editor)
Usage~
`Nuiterm.toggle('editor', 2, 'python')` (run python in global terminal 2 - if opening)
Usage~
`Nuiterm.toggle('editor', -1)` (open a new global terminal)

------------------------------------------------------------------------------
                                                        *Nuiterm.change_style()*
                 `Nuiterm.change_style`({style}, {type}, {num})
Change terminal UI style

Parameters~
{style} `(string|nil)` the ui style to change to (or swap if nil)
{type} `(string|nil)` the type of terminal to toggle (see |Nuiterm.config|)
{num} `(integer|nil)` the id of the terminal to toggle

------------------------------------------------------------------------------
                                                       *Nuiterm.change_layout()*
                `Nuiterm.change_layout`({layout}, {type}, {num})
Change terminal UI layout

Parameters~
{layout} `(table|nil)` see nui.popup:update_layout
{type} `(string|nil)` the type of terminal to toggle (see |Nuiterm.config|)
{num} `(integer|nil)` the id of the terminal to toggle

------------------------------------------------------------------------------
                                           *Nuiterm.focus_buffer_for_terminal()*
                  `Nuiterm.focus_buffer_for_terminal`({bufnr})
Focus the buffer tied to the terminal under cursor in window 1

Parameters~
{bufnr} `(number|nil)` the buffer number of the terminal

------------------------------------------------------------------------------
                                                                *Nuiterm.send()*
               `Nuiterm.send`({cmd}, {type}, {num}, {setup_cmd})
Send text to a terminal

Parameters~
{cmd} `(string)` the command to send to the terminal
{type} `(string|nil)` the type of terminal to send to (or default). "select" to select from menu
{num} `(number|nil)` the id of the terminal (type specific)
{setup_cmd} `(string|nil)` the first command to send to a freshly opened terminal (if needed)

------------------------------------------------------------------------------
                                                         *Nuiterm.send_select()*
            `Nuiterm.send_select`({cmd}, {type}, {num}, {setup_cmd})
Wrap sending text to a terminal to allow for selecting terminal

Parameters~
{cmd} `(string)` the command to send to the terminal
{type} `(string|nil)` the type of terminal to send to (or default). "select" to select from menu
{num} `(number|nil)` the id of the terminal (type specific)
{setup_cmd} `(string|nil)` the first command to send to a freshly opened terminal (if needed)

------------------------------------------------------------------------------
                                                           *Nuiterm.send_line()*
                `Nuiterm.send_line`({type}, {num}, {setup_cmd})
Send current line in buffer to a terminal

Parameters~
{type} `(string|nil)` the type of terminal to send to (or default)
{num} `(number|nil)` the id of the terminal (type specific)
{setup_cmd} `(string|nil)` the first command to send to a freshly opened terminal (if needed)

------------------------------------------------------------------------------
                                                          *Nuiterm.send_lines()*
   `Nuiterm.send_lines`({start_line}, {end_line}, {type}, {num}, {setup_cmd})
Send multiple lines in buffer to a terminal

Parameters~
{start_line} `(number|nil)` the line number at which to start sending
{end_line} `(number|nil)` the line number at which to end sending
{type} `(string|nil)` the type of terminal to send to (or default)
{num} `(number|nil)` the id of the terminal (type specific)
{setup_cmd} `(string|nil)` the first command to send to a freshly opened terminal (if needed)

------------------------------------------------------------------------------
                                                      *Nuiterm.send_selection()*
`Nuiterm.send_selection`({line}, {start_col}, {end_col}, {type}, {num}, {setup_cmd})
Send selection in line in buffer to a terminal

Note: this is robust to reverse selections

Parameters~
{line} `(string|nil)` the line number at which to send
{start_col} `(string|nil)` the column number at which to start sending
{end_col} `(string|nil)` the column number at which to end sending
{type} `(string|nil)` the type of terminal to send to (or default)
{num} `(number|nil)` the id of the terminal (type specific)
{setup_cmd} `(string|nil)` the first command to send to a freshly opened terminal (if needed)

------------------------------------------------------------------------------
                                                         *Nuiterm.send_visual()*
               `Nuiterm.send_visual`({type}, {num}, {setup_cmd})
Send visual selection

Note: this is robust to reverse selections

Parameters~
{type} `(string|nil)` the type of terminal to send to (or default)
{num} `(number|nil)` the id of the terminal (type specific)
{setup_cmd} `(string|nil)` the first command to send to a freshly opened terminal (if needed)

------------------------------------------------------------------------------
                                                           *Nuiterm.send_file()*
                `Nuiterm.send_file`({type}, {num}, {setup_cmd})
Send file contents to terminal

Parameters~
{type} `(string|nil)` the type of terminal to send to (or default)
{num} `(number|nil)` the id of the terminal (type specific)
{setup_cmd} `(string|nil)` the first command to send to a freshly opened terminal (if needed)

------------------------------------------------------------------------------
                                                         *Nuiterm.toggle_menu()*
                            `Nuiterm.toggle_menu`()
Toggle terminal menu to select (and toggle) terminals


------------------------------------------------------------------------------
                                                        *Nuiterm.confirm_quit()*
                     `Nuiterm.confirm_quit`({write}, {all})
Confirm quit commands when terminals are mounted

Parameters~
{write} `(boolean|nil)` whether to write before quitting
{all} `(boolean|nil)` if all windows are being quit


==============================================================================
------------------------------------------------------------------------------
                                                                *Nuiterm.config*
                                `Nuiterm.config`

Plugin config

Default values:
>
  Nuiterm.config = {
    -- Default type of terminal
    -- could be "buffer", "window", "tab", or "editor"
    type = "buffer",
    -- Show terminal window (if hidden) when sending code
    show_on_send = true,
    -- Move cursor to terminal window when opening
    focus_on_open = true,
    -- Move cursor to terminal window when sending code
    focus_on_send = false,
    -- Use current buffer location for terminal directory (will use cwd otherwise)
    open_at_cur_buf = true,
    -- Only allow terminal buffer to use terminal window
    terminal_win_fixed = true,
    -- Persist changes to terminal window size
    persist_size = true,
    -- Hide terminal when leaving window
    hide_on_leave = false,
    -- Confirm exit when mounted terminals exist
    confirm_quit = true,
    -- Set insert mode on entering nuiterm terminal buffer
    insert_on_enter = true,
    -- Number of parent directories to show for buffers in terminal menu
    menu_buf_depth = 1,
    -- Confirm destruction of terminals
    menu_confirm_destroy = true,
    -- Keymaps for terminals (see nui.popup for more info)
    keymaps = {},
    ui = {
      -- Default ui type of terminal
      -- could be "split" or "popup"
      type = "split",
      -- Default layouts to cycle through (see nui.popup:update_layout)
      default_layouts = {
        split = {
          {relative = "editor", size = "40%", position = "right"},
          {relative = "editor", size = "40%", position = "bottom"},
        },
        popup = {
          {relative = "editor", size = "80%", position = "50%"},
          {relative = "editor", size = {height = "90%", width = "40%"},
            position = {col = "95%", row = "40%"}},
          {relative = "editor", size = {height = "40%", width = "40%"},
            position = {col = "95%", row = "10%"}},
        },
      },
      -- Default nui ui options
      nui_opts = {
        enter = true,
        focusable = true,
        border = {
          style = "rounded",
        },
      },
      -- Default terminal menu keybindings
      menu_keys = {
        focus_next = {"j", "<Down>", "<Tab>"},
        focus_prev = {"k", "<Up>", "<S-Tab>"},
        submit = {"<CR>", "<Space>"},
        close = {"<Esc>", "<C-c>", "q"},
        new = {"n"},
        destroy = {"d"},
        change_style = {"s"},
        change_layout = {"e"},
        toggle = {"w"},
      },
      -- Default terminal menu popup ui options
      menu_opts = {
        relative = "editor",
        position = '50%',
        size = '50%',
        zindex = 500
      }
    }
  }
<


==============================================================================
------------------------------------------------------------------------------
                                                                      *Terminal*
                                   `Terminal`

Class~
{Terminal}

Fields~
{bufname} `(string)` name of terminal buffer (uses nuiterm:... pattern)
{bufnr} `(integer)` buffer number of terminal buffer
{cwd} `(string)` directory of terminal
{keymaps} `(table)` table of keymaps that are set for terminal buffer
{repl} `(boolean)` whether repl active or not (not currently used)
{type} `(string)` type of terminal (see |Nuiterm.config|)
{type_id} `(string)` id number of terminal as string (specific to type)
{ui} `(table)` ui details for terminal
{ui.type} `(string)` type of nui object to use for window
{ui.options} `(table)` nui.object terminal nui options
{ui.num_layout} `(integer)` which layout the terminal should be in

------------------------------------------------------------------------------
                                                                *Terminal:new()*
                           `Terminal:new`({options})
Create new terminal object

Parameters~
{options} `(table|nil)` config options for terminal (see |Nuiterm.config|)

------------------------------------------------------------------------------
                                                      *init_funcs.get_type_id()*
                      `init_funcs.get_type_id`({options})
Get type id

Parameters~
{options} `(table)` terminal options table

------------------------------------------------------------------------------
                                               *init_funcs.generate_type_name()*
                   `init_funcs.generate_type_name`({options})
Create type name for terminal (if tied to buffer)

Parameters~
{options} `(table)` terminal options table

------------------------------------------------------------------------------
                                                     *init_funcs.get_term_cwd()*
                      `init_funcs.get_term_cwd`({options})
Get term cwd

Parameters~
{options} `(table)` terminal options table

------------------------------------------------------------------------------
                                                      *init_funcs.get_ui_opts()*
                      `init_funcs.get_ui_opts`({ui_type})
Get UI options

Parameters~
{ui_type} `(string)` terminal ui style

------------------------------------------------------------------------------
                                                        *Terminal:set_keymaps()*
                            `Terminal:set_keymaps`()
Create keymaps in terminal buffer


------------------------------------------------------------------------------
                                                               *Terminal:show()*
                        `Terminal:show`({focus}, {cmd})
Show the terminal window

Parameters~
{focus} `(boolean|nil)` whether to put cursor in terminal when showing
{cmd} `(string|nil)` cmd to run immediately in terminal (if not shown before)

------------------------------------------------------------------------------
                                                              *Terminal:mount()*
                            `Terminal:mount`({cmd})
Create a terminal buffer

Parameters~
{cmd} `(string|nil)` cmd to send to the terminal upon mounting

------------------------------------------------------------------------------
                                                            *Terminal:unmount()*
                              `Terminal:unmount`()
Unmount the terminal


------------------------------------------------------------------------------
                                                               *Terminal:send()*
                             `Terminal:send`({cmd})
Send command to the terminal

Parameters~
{cmd} `(string|nil)` command to run in terminal

------------------------------------------------------------------------------
                                                            *Terminal:isshown()*
                              `Terminal:isshown`()
Check if terminal UI is displayed


------------------------------------------------------------------------------
                                                          *Terminal:ismounted()*
                             `Terminal:ismounted`()
Check if terminal UI is mounted


------------------------------------------------------------------------------
                                                       *Terminal:change_style()*
                        `Terminal:change_style`({style})
Change UI style of terminal

Parameters~
{style} `(string)` split or popup

------------------------------------------------------------------------------
                                                      *Terminal:change_layout()*
                       `Terminal:change_layout`({layout})
Change UI layout of terminal

Parameters~
{layout} `(table|nil)` see nui.popup:update_layout() for details


 vim:tw=78:ts=8:noet:ft=help:norl: